clear all; 
close all;
clc

%% image alignment

fixed  = im2gray(imread('../dataset/base_loteria.jpg'));
moving = im2gray(imread('../dataset/2.jpg'));


% https://www.mathworks.com/help/vision/ug/find-image-rotation-and-scale-using-automated-feature-matching.html
ptsfixed  = detectSURFFeatures(fixed);
ptsmoving = detectSURFFeatures(moving);
[featuresfixed,  validPtsfixed]  = extractFeatures(fixed,  ptsfixed);
[featuresmoving, validPtsmoving] = extractFeatures(moving, ptsmoving);
indexPairs = matchFeatures(featuresfixed, featuresmoving);
matchedfixed  = validPtsfixed(indexPairs(:,1));
matchedmoving = validPtsmoving(indexPairs(:,2));
figure;
showMatchedFeatures(fixed,moving,matchedfixed,matchedmoving);
title('Putatively matched points (including outliers)');

[tform, inlierIdx] = estimateGeometricTransform2D(...
    matchedmoving, matchedfixed, 'similarity');
inliermoving = matchedmoving(inlierIdx, :);
inlierfixed  = matchedfixed(inlierIdx, :);
figure;
showMatchedFeatures(fixed,moving,inlierfixed,inliermoving);
title('Matching points (inliers only)');
legend('ptsfixed','ptsmoving');

Tinv  = tform.invert.T;

ss = Tinv(2,1);
sc = Tinv(1,1);
scaleRecovered = sqrt(ss*ss + sc*sc);
thetaRecovered = atan2(ss,sc)*180/pi;

outputView = imref2d(size(fixed));
recovered  = imwarp(moving,tform,'OutputView',outputView);
figure, imshowpair(fixed,recovered,'montage');


%% segona part de homografia
% [optimizer,metric] = imregconfig('multimodal');
% movingRegisteredDefault = imregister(recovered,fixed,'affine',optimizer,metric);
% figure, imshowpair(fixed,movingRegisteredDefault,'montage')

%% trobar nums
level = graythresh(recovered);
im_binaria = imbinarize(recovered,level);
figure,imshow(im_binaria);
im_binaria = imcomplement(im_binaria);
imshow(im_binaria);
se = strel('square',3);
im_binaria2 = imopen(im_binaria, se);
im_binaria2 = imclose(im_binaria2, se);
imshowpair(im_binaria2, im_binaria, 'montage');
im_binaria = im_binaria2;


label = bwlabel(im_binaria);
regions = regionprops(label,'Area');
area = cat(1,regions.Area);



s = regionprops(BW1,'BoundingBox');
bboxes = vertcat(s(:).BoundingBox);
[~,ord] = sort(bboxes(:,2));
bboxes = bboxes(ord,:);





propied = regionprops(label, 'BoundingBox', 'Area');

index = 1;
for i = 1:size(propied)
    if (propied(i).Area > 750 && propied(i).Area < 1500)
        rectangle('Position', propied(i).BoundingBox,'EdgeColor', 'r','LineWidth', 2)
        roi(index) = propied(i);
        index = index +1;
    end
end

% eliminem els laterals per tal que no toquin les zones blanques.
e = strel('square',2);
im_binaria2 = imopen(im_binaria2, se);
index = 1;
for i = 1:size(roi, 2)
    region = roi(i);
    results(index) = ocr(im_binaria2, region.BoundingBox);
    index = index + 1;
end
1-1
